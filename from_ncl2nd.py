from PIL import Image
from skimage.transform import ProjectiveTransform, warp
import numpy as np
import math

# Load the 2D image generated by NCL
image_path = "./ncl.png"
image = Image.open(image_path)

# Convert the image to a numpy array
image_array = np.array(image)

# Define the azimuth, elevation, and roll angles (in degrees)
azimuth = 45
elevation = 30
roll = 0

# Convert angles from degrees to radians
azimuth_rad = math.radians(azimuth)
elevation_rad = math.radians(elevation)
roll_rad = math.radians(roll)

# Calculate the projective transformation matrix
cos_az = math.cos(azimuth_rad)
sin_az = math.sin(azimuth_rad)
cos_el = math.cos(elevation_rad)
sin_el = math.sin(elevation_rad)
cos_roll = math.cos(roll_rad)
sin_roll = math.sin(roll_rad)

transform_matrix = np.array([
    [cos_az * cos_el, cos_az * sin_el * sin_roll - sin_az * cos_roll, cos_az * sin_el * cos_roll + sin_az * sin_roll],
    [sin_az * cos_el, sin_az * sin_el * sin_roll + cos_az * cos_roll, sin_az * sin_el * cos_roll - cos_az * sin_roll],
    [-sin_el, cos_el * sin_roll, cos_el * cos_roll]
])

# Create a ProjectiveTransform object
#transform = ProjectiveTransform(matrix=transform_matrix)
#
## Apply the projective transformation to each color channel separately
#transformed_image_array = np.zeros_like(image_array)
#height, width, _ = image_array.shape
#coords = np.mgrid[:height, :width].reshape(2, -1).T
#
#for i in range(3):  # Assuming RGB image (3 color channels)
#    channel = image_array[..., i].reshape(-1)
#    transformed_channel = transform(coords).reshape(height, width)
#    transformed_image_array[..., i] = transformed_channel
#
## Convert the transformed image array back to a PIL image
#transformed_image = Image.fromarray(np.uint8(transformed_image_array))

# Create a ProjectiveTransform object
transform = ProjectiveTransform(matrix=transform_matrix)

# Apply the projective transformation using warp()
transformed_image_array = warp(image_array, transform, mode='wrap')

# Convert the transformed image array back to a PIL image
transformed_image = Image.fromarray(np.uint8(transformed_image_array))


# Save the transformed image
output_path = "./from_ncl2nd.png"
transformed_image.save(output_path)